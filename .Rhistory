x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(1,2,3,4,5,6)
cachemean(c(1,2,3,4,5,6))
myVector<-makeVector(1:15)
myVector
makeVector
x <<- y
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmatrix <- function(solve) m <<- matrix
getmatrix <- function() m
list(set = set, get = get,
setmatrix = setmatrix,
getmatrix = getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getmatrix()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setmatrix(m)
m
}
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
m1
I2 <- matrix(c(1,0,0,1), nrow = 2, ncol = 2)
I2
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
n1
m1 %*% n1
n1 %*% m1
solve(m1)
solve(n1)
myMatrix_object<-makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getinverse()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- matrix
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(solve) inv <<- solve
getinverse <- function() inv
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
str(length)
?split
set.seed(1)
rpois(5,2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants, 15)
summary(plants)
table(plants&Active_Growth_Period)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100, replace=TRUE, prob = c(0.3,0.7))
flips
sum(flips)
?binorm
?rbinorm
?rbinom
rbinom(1,size=100, prob=0.7)
flips2<-rbinom(100,1,0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5,10)
my_pois<-replicate(100, rpois(5,10))
my_pois
colMeans(my_pois)
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$speed, y=cars$dist, xlab = "Speed")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars, sub="My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
load(mtcars)
load("mtcars")
data(mtcars)
?boxplot
boxplot(mtcars,mpg~cyl)
boxplot(formula= mpg~cyl, data=mtcars)
hist(mtcars$mpg)
install.packages(tidyverse)
install.packages("tidyr")
library("xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
install.packages("tidyr")
library(xlsx)
library(xlsx)
x<- rnorm(100)
hist(x)
y<-rnorm(100)
plot(x,y)
par(mar=c(2,2,2,2))
plot(x,y)
par(mar=c(4,4,2,2))
plot(x,y)
plot(x,y, pch=18)
plot(x,y, pch=2)
plot(x,y, pch=1)
plot(x,y, pch=18)
plot(x,y, pch=20)
plot(x,y, pch=19)
plot(x,y, pch=20)
plot(x,y, pch=26)
plot(x,y, pch=25)
plot(x,y, pch=3)
plot(x,y, pch=1)
plot(x,y, pch=20)
title("Scatterplot")
text(-2,-2, "Label")
lend("topleft", legend="Data")
lend("topleft", legend="Data", pch=20)
legend("topleft", legend="Data", pch=20)
fit<-lm(y~x)
fit<-lm(y ~ x)
abline(fit)
library(datasets)
datasets
with(faithful, plot(eruptions, waiting))
title (main="Old Faithful Geyser data")
setwd("~/Documents/r_working_directory")
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title (main="Old Faithful Geyser data")
dev.off()
library(swirl)
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col="blue")
abline(h==12)
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", break=100)
hist(ppm, col="green", breaks =100)
rug(ppm)
hist(ppm, col="green")
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg<-table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region, pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution, region=="east")
head(east)
hist(east$pm25, col="green")
west<-subset(pollution, region=="west")
hist(subset(pollution, region=="west")$pm25, col="green")
with(pollution,plot(pm25, latitude))
with(pollution,plot(latitude, pm25))
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col="pollution$region")
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west<-subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="West")
plot(east$latitude, east$pm25, main="East")
?Device
?Devices
with(faithful, plot(eruption, waiting))
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed, max(cars$dist, "SWIRL rules!")))
text(mean(cars$speed, max(cars$dist), "SWIRL rules!"))
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income, state, layout=c(4,1))
xyplot(Life.Exp~Income|region, data=state, layout=c(4,1))
xyplot(Life.Exp~Income|region, data=state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm=TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone(ppb)", col.axis="blue", col.lab="red")
boxplot(Ozone~Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par()$fg
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, set="n")
plot(airquality$Wind, airquality$Ozone, type="n")
title(main="Wind and Ozone in NYC")
may<-subset(airquality$Month=5)
may<-subset(airquality$Month==5)
may<-subset(airquality, Month=5)
may<-subset(airquality, Month==5)
points(may$Wind, may$Ozone, col="blue", pch="24")
points(may$Wind, may$Ozone, col="blue", pch=24)
points(may$Wind, may$Ozone, col="blue", pch=17)
may<-subset(airquality, !Month==5)
notmay<-subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend(topright, c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", c(17,8), c("blue", "red"), c("May", "Other Months"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(h=median(airquality$Wine), lty=2, lwd=2)
abline(v=median(airquality$Wine), lty=2, lwd=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone)
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main="Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1),oma = c(0, 0, 2, 0))
plot(airquality$Wind, airquality$Ozone, main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main="Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main="Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer=TRUE)
setwd("~/Documents/r_working_directory")
my_data <- read.delim("household_power_consumtion.txt")
my_data <- read.delim("household_power_consumption.txt")
my_data_short<-grep("2007-02-01"| "2007-02-02", my_data$Date)
my_data_short<-regex("2007-02-01"| "2007-02-02", my_data$Date)
my_data_short<-regex("2007-02-01| 2007-02-02", my_data$Date)
my_data_short<-grep("2007-02-01| 2007-02-02", my_data$Date)
dim(my_data_short)
head(my_data_short)
my_data_short<-grep("01/02/2007| 02/02/2007", my_data$Date)
dim(my_data_short)
my_data_short<-grep("01/02/2007", my_data$Date)
dim(my_data_short)
head(my_data)
dim(my_data)
my_data <- read.table("household_power_consumption.txt")
dim(my_data)
my_data <- read.table("household_power_consumption.txt", sep=";")
dim(my_data)
my_data_short<-grep("01/02/2007", my_data$Date)
head(my_data_short)
head(my_data)
my_data <- read.delim("household_power_consumption.txt", sep=";")
head(my_data)
my_data_short<-subset(my_data$Date="01/02/2007" | my_data$Date="02/02/2007")
my_data_short<-subset(my_data$Date=="01/02/2007" | my_data$Date=="02/02/2007")
my_data_short<-subset(my_data, Date=="01/02/2007" | my_data$Date=="02/02/2007")
dim(my_data_short)
my_data_short<-subset(my_data, Date=="01/02/2007" | Date=="02/02/2007")
dim(my_data_short)
my_data_short<-subset(my_data, Date=="01/02/2007")
dim(my_data_short)
my_data_short<-subset(my_data, Date="01/02/2007")
dim(my_data_short)
?subset
dim(my_data)
my_data_short<-subset(my_data, Date=01/02/2007)
dim(my_data_short)
as.Date(my_data$Date=%d/%m/%Y)
as.Date(my_data$Date="%d/%m/%Y")
as.Date(my_data$Date)
as.Date(my_data$Date,"%d/%m/%Y")
head(my_data)
my_data$Date<-as.Date(my_data$Date,"%d/%m/%Y")
head(my_data)
my_data$Time<-strptime(my_data$Time,"%H/%M/%S")
head(my_data)
my_data$Time<-strptime(my_data$Time,"%H:%M:%S")
head(my_data)
my_data <- read.delim("household_power_consumption.txt", sep=";")
my_data$Date<-as.Date(my_data$Date,"%d/%m/%Y")
my_data$Time<-strptime(my_data$Time,"%H:%M:%S")
head(my_data)
my_data <- read.delim("household_power_consumption.txt", sep=";")
head(my_data)
my_data$Date<-as.Date(my_data$Date,"%d/%m/%Y")
head(my_data)
my_data$Time<-strptime(my_data$Time,"%H:%M:%S")
head(my_data)
my_data <- read.delim("household_power_consumption.txt", sep=";")
my_data$Date<-as.Date(my_data$Date,"%d/%m/%Y")
head(my_data)
my_data$Time<-strftime(my_data$Time,"%H:%M:%S")
class(my_data$time)
class(my_data$Time)
my_data$Time<-stptime(my_data$Time,"%H:%M:%S")
my_data$Time<-strptime(my_data$Time,"%H:%M:%S")
head(my_data)
my_data <- read.delim("household_power_consumption.txt", sep=";")
my_data$Date<-as.Date(my_data$Date,"%d/%m/%Y")
head(my_data)
head(my_data)
my_data_short<-subset(my_data, Date=01/02/2007)
head(my_data_short)
dim(my_data_short)
class(my_data)
my_data_short<-subset(my_data, Date=01/02/2007, select=Date:Sub_metering_3)
dim(my_data_short)
my_data_short<-subset(my_data, Date=2007-02-01, select=Date:Sub_metering_3)
dim(my_data_short)
my_data_short<-subset(my_data, Date="2007-02-01", select=Date:Sub_metering_3)
dim(my_data_short)
my_data_short<-subset(my_data, Date=="2007-02-01", select=Date:Sub_metering_3)
dim(my_data_short)
my_data_short_2<-subset(my_data, Date=="2007-02-01"|Date=="2007-02-02", select=Date:Sub_metering_3)
dim(my_data_short_2)
table(my_data_short_2$Date)
my_data_short<-subset(my_data, Date=="2007-02-01"|Date=="2007-02-02", select=Date:Sub_metering_3)
dim(my_data_short_2)
sum(is.na(my_data_short))
sum(is.na(my_data))
sum(is.na(my_data_short))
setwd("~/Documents/olivialadinig/ExData_Plotting1")
